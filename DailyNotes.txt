	Java Fullstack
	
	
	
	java developer
	database developer
	frontend develoeper
	
	
	
	corejava			case study-1
	database(mysql)
	JDBC
	JPA					case study-2
	SPring 
	Springboot			case study-3
	
	html
	css
	js
	bs
	ts
	angular				case study-4
	
	
	
	
Language:
==========
communication with human

Programming Languages:
=======================
		communication with machine	
	
		c,c++,python,java,.net,php...
		
		
		POP								OOP
B,BCPL,C,COBOL,PHOTON...		c++,python,java,.net,.php.....oopl
		

				1)Performance		inheritance,polymorphisam
				2)Security			abstraction,encapsulation

	oops features
	
	
	oopl
	
	
	WHY JAVA?	android	1995 JDK 1.0			WORA
	
			platform independent
			garbage collection -->GC  JVM
	
	
	
		netflix
	
	
	
	
	
	java app  sunmicro system--oracle corporation
	
	
	.net  microsoft platform depenedent
	
		windows 7
		machine1	
	
	ram 			sai
	linux			mac
	
	
		welcome to java
		
		
		java sun micro system
		
	
	jdk-->jre-->JVM
		JVM
		
	Welcome.java
		
		53 keywords--lowercase
		
		
		compailation--->compiler
		
		compailation-->source code-->byte code 
		
		javac filename.java --->.class
		
		JVM
		java classname-->output
		//JVM-->binary 0's 1's byte code   translator --->translation

//source /user understandable language   ---->machine /byte/binary  -->compiler-->compailation
//			compiler-->compailation			execution/JVM
// .java  -------------------------->.class------------->output
		//	javac filename.java				java classname		
		
Idetifiers:
===========		
	any	name in java will call it as idetifier 
		it can be classname,method name ,variable,obj,interface name......
		
		
		a-z
		A-Z
		0-9
		$
		_
		
variables:
=========		
		variable is a name of memory location
		
syntax:		datatype varname=value;
			
		local -->inside the method
		global-->outside the method and with in the class 
		
Datatypes:
=========		
		primitiveDT       non-primitiveDT 
		
							String,array,object...
		
		8 PDT		empid,empname,salary,address,email,desgnation,gender....
		
byte    1 byte		-128 to 127
short	2 bytes		-32768 to 32767
int		4 bytes		-2147483648 to 2147483647
long	8 bytes		-2 power 64 to (2 power 64)-1			byte age=31;

float	4 bytes		5 to 6   21.32589236289738 f
double	8 bytes    14 to 15

char	2 bytes		unicode	'M'
boolean 1 bit     true-1,false-0		
		
		
		
	ASCII 
		A-65
		a-97
	
	
	Instance and static 
	===================
	
	SYNTAX:
		will use static  keyword to define static variable 
		instance
	
	MEMORY
			static :static properties will get memory space only once at the time  class loading into JVM
			instance :instance properties will get memory at the time object creation
						class 
						object -->memory creation(instantiation)
						
						classname objname=new classname();
	
	ACCESS
	
		will use classname to access static properties
		will use objref to access instance properties
	
	USAGE 
	
		for common data where we reuire one time memory will go for static
		
					like schoolname,orgname,coutryname,statename....
	
		for unique will go for instance
				empid,stuid,pancard,aadhar,contact.....
	
	
	
	java
	class   java classname jvm
	
	execution
	
	3 parts 
			loading the .class jvm
				CLSS
				
						
				
				
				memory areas
				
				
				
				
				Execution Engine
					
	
	
	zero->byte,short,int,long
	
	0.0-->float,double
	false-->boolean
	space-->char
	
dynamic data:
=============	
	
	package,import 
	
	
	package
	
			predefined 			java.lang,java.util.java.io   ...
			user defined    package com.onlinetraining9.basics
			
			
			
			
			
			IDE tool apache 
			
			
			
		NOTE:By Default package avialable for every java file is java.lang	
			
			
Methods:
========		instance/static	
			
			public static o main(String args[])
			{
			
			
			}
			
			
			syntax:
			======
			
			accessmodifier static/instance returntype methodname(param1,param2....)
			{
			
			return 
			
			}
			
Flow Control Statements:
========================			
			
			
			
			
OOPS:
======

				1)Performance		inheritance,polymorphisam
				2)Security			abstraction,encapsulation




Inheritance:
============
			code reusability
	
	aquiring the features/properties from one class to another class
	

extends ,implements


class Parent		PARENT/SUPER
{
	//200 variables
	
	//1000 methods 
	

}


 
class Test 	extends	Parent			class A
{
	//10 methods

}


	NOTE:
			By Default PACKAGE avialable for every java file is java.lang	
			By Default PARENT CLASS avialable for every java class is java.lang.Object	


Multiple Inheritance:
=====================

	MI is not supported by java through classes
	MI is  supported by java through interfaces
	
	class Parent1            class Parent2
	{						{
	
	void m1()				void m1(){
	{		
	sop("hello");			sop("hi")
	}						}
	
	
	
	}						}
	
	class Child extends Parent1,Parent2
	{
	
	p s v main(String args[])
	{
		Child child=new Child();
				child.m1()
	
	}
	}
	
	Methods:
	=========
	
		abstract
		
		concrete /non abstract 
	
	
	concrete method
		method with body/logic/implementation
	
	abstract method
		method with out body/logic/implementation
	
	
	
	concrete class 		:	its a collection of only concrete methods
	
	abstract class		:	its a combination of both concrete and abstract methods
	
	interface			:	its a collection of only abstract methods
	
				interface methods are by default public abstract 
				interface variables are public static final
	
		Abstraction:
			
				abstract class		0-100
				
				interface			100%




		
			
			
			
	